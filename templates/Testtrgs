using System;
using System.IO;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Azure.WebJobs;
using Microsoft.Azure.WebJobs.Extensions.Http;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using CAT.App.D365.Service.Application.Service;
using Newtonsoft.Json.Linq;
using Azure;

namespace CAT.App.D365.Service.FA.Triggers
{
    public class CustomerTriggers
    {
        private readonly ICustomerApplication _service;

        public CustomerTriggers(ICustomerApplication service)
        {
            _service = service;
        }

        [FunctionName("CreateCustomer")]
        public async Task<IActionResult> CreateCustomerAsync(
            [HttpTrigger(AuthorizationLevel.Function, "post", Route = null)] HttpRequest req,
            ILogger log)
        {
            dynamic responseMessage = new JObject();
            try
            {
                string requestBody = await new StreamReader(req.Body).ReadToEndAsync();
                dynamic data = JsonConvert.DeserializeObject<dynamic>(requestBody);

                log.LogInformation($"HTTP create customer trigger function processed a request with request message {data}");

                if (string.IsNullOrEmpty(data.PrimaryPostalAddress.CountryRegionISOCode?.ToString()))
                {
                    log.LogInformation($"Customer account creation failed, CountryRegionISOCode is a required field");
                    responseMessage.Add(new JProperty("ReturnMessage", "Customer account creation failed, Invalid Address Information"));
                    responseMessage.Add(new JProperty("ReturnValue ", false));
                    return new BadRequestObjectResult(responseMessage);
                }
                else if(string.IsNullOrEmpty(data.PrimaryPostalAddress.ZipCode?.ToString()))
                {
                    log.LogInformation($"Invalid ZipCode Address Information");
                    responseMessage.Add(new JProperty("ReturnMessage", "Customer account creation failed, Invalid Address Information"));
                    responseMessage.Add(new JProperty("ReturnValue ", false));
                    return new BadRequestObjectResult(responseMessage);
                }

                if (!string.IsNullOrEmpty(data.CompanyId?.ToString()))
                {
                    var response = await _service.CreateCustomerAsync(requestBody);
                    responseMessage = JsonConvert.DeserializeObject(response);
                    responseMessage.Add(new JProperty("ReturnMessage", "Customer Account Successfully Created"));
                    responseMessage.Add(new JProperty("ReturnValue ", true));
                }
                else
                {
                    log.LogInformation($"CompanyId is a required attribute");
                    responseMessage.Add(new JProperty("ReturnMessage", "Customer account creation failed, CompanyId is a required attribute"));
                    responseMessage.Add(new JProperty("ReturnValue ", false));
                    return new BadRequestObjectResult(responseMessage);
                }

                log.LogInformation($"create customer request was successfully completed with response message {responseMessage}");
                return new OkObjectResult(responseMessage);
            }
            catch (Exception ex)
            {
                responseMessage.Add(new JProperty("ReturnMessage", $"Customer account creation failed, with error message: {ex.Message}"));
                responseMessage.Add(new JProperty("ReturnValue ", false));
                log.LogError($"An error occured. Message: {ex.Message} Inner Exception: {ex.InnerException}");
                return new BadRequestObjectResult(responseMessage);
            }
        }

        [FunctionName("GetCustomer")]
        public async Task<IActionResult> GetCustomerAsync([HttpTrigger(AuthorizationLevel.Function, "get", Route = "GetCustomer")] HttpRequest req,
            ILogger log)
        {
            try
            {
                string customerAccount = req.Query["CustomerAccount"];
                string companyId = req.Query["CompanyId"];

                log.LogInformation($"C# HTTP get customer information trigger function processed a get customer({customerAccount}) record request.");

                string response = await _service.GetCustomerAsync(companyId, customerAccount);

                dynamic responseMessage = JsonConvert.DeserializeObject(response);
                responseMessage.Add(new JProperty("ReturnMessage", "Customer record retrieved retrieved."));
                responseMessage.Add(new JProperty("ReturnValue ", true));
                return new OkObjectResult(responseMessage);
            }
            catch (Exception ex)
            {
                log.LogError($"An error occured. Message: {ex.Message} Inner Exception: {ex.InnerException}");
                throw new Exception(ex.Message);
            }
        }

        [FunctionName("UpdateCustomer")]
        public async Task<IActionResult> UpdateCustomerAsync([HttpTrigger(AuthorizationLevel.Function, "put", Route = "UpdateCustomer")] HttpRequest req, ILogger log)
        {
            dynamic responseMessage = new JObject();
            try
            {
                string customerAccount = req.Query["CustomerAccount"];
                string companyId = req.Query["CompanyId"];

                log.LogInformation($"C# HTTP update customer trigger function processed an update customer({customerAccount}) record request.");

                string requestBody = await new StreamReader(req.Body).ReadToEndAsync();
                dynamic data = JsonConvert.DeserializeObject(requestBody);

                var response = await _service.UpdateCustomerAsync(requestBody, companyId, customerAccount);
                responseMessage = JsonConvert.DeserializeObject(response);
                responseMessage.Add(new JProperty("ReturnMessage", "Customer Acount Successfully Updated"));
                responseMessage.Add(new JProperty("ReturnValue ", true));

                return new OkObjectResult(responseMessage);
            }
            catch (Exception ex)
            {
                responseMessage.Add(new JProperty("ReturnMessage", ex.Message));
                responseMessage.Add(new JProperty("ReturnValue ", false));
                log.LogError($"An error occured. Message: {ex.Message} Inner Exception: {ex.InnerException}");
                return new BadRequestObjectResult(responseMessage);
            }
        }
    }
}
